<!DOCTYPE html>
<html lang="en" data-theme="light">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vocabulary Practice - LinguaLearn</title>
    <link href="https://cdn.jsdelivr.net/npm/daisyui@4.12.23/dist/full.min.css" rel="stylesheet" type="text/css" />
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
</head>
<body class="bg-base-100">
    <!-- Navigation -->
    <div class="navbar bg-accent text-accent-content">
        <div class="navbar-start">
            <a href="/" class="btn btn-ghost text-xl">LinguaLearn</a>
        </div>
        <div class="navbar-center">
            <h1 class="text-lg font-semibold">Vocabulary Practice</h1>
        </div>
        <div class="navbar-end">
            <div class="dropdown dropdown-end">
                <div tabindex="0" role="button" class="btn btn-ghost btn-circle avatar">
                    <div class="w-10 rounded-full">
                        <img alt="User avatar" src="https://img.daisyui.com/images/stock/photo-1534528741775-53994a69daeb.webp" />
                    </div>
                </div>
                <ul tabindex="0" class="menu menu-sm dropdown-content bg-base-100 text-base-content rounded-box z-[1] mt-3 w-52 p-2 shadow">
                    <li><a href="/dashboard">Dashboard</a></li>
                    <li><a href="/profile">Profile</a></li>
                    <li><a onclick="logout()">Logout</a></li>
                </ul>
            </div>
        </div>
    </div>

    <div class="container mx-auto px-4 py-8">
        <!-- Mode Selection -->
        <div class="tabs tabs-boxed mb-8 justify-center">
            <a class="tab tab-active" onclick="switchMode('practice')" id="practice-tab">Practice Mode</a>
            <a class="tab" onclick="switchMode('quiz')" id="quiz-tab">Quiz Mode</a>
            <a class="tab" onclick="switchMode('review')" id="review-tab">Spaced Review</a>
            <a class="tab" onclick="switchMode('wordbank')" id="wordbank-tab">Word Banks</a>
        </div>

        <!-- Progress Section -->
        <div class="mb-8" id="progress-section">
            <div class="stats shadow w-full">
                <div class="stat">
                    <div class="stat-title">Progress</div>
                    <div class="stat-value text-sm" id="progress-text">0/10</div>
                    <div class="stat-desc">
                        <progress class="progress progress-accent w-full" value="0" max="100" id="progress-bar"></progress>
                    </div>
                </div>
                <div class="stat">
                    <div class="stat-title">Score</div>
                    <div class="stat-value text-accent" id="score-text">0</div>
                    <div class="stat-desc">Points earned</div>
                </div>
                <div class="stat">
                    <div class="stat-title">Streak</div>
                    <div class="stat-value text-success" id="streak-text">0</div>
                    <div class="stat-desc">Correct answers</div>
                </div>
            </div>
        </div>

        <!-- Practice/Quiz Mode -->
        <div id="practice-mode">
            <div class="card bg-base-100 shadow-xl">
                <div class="card-body">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="card-title">Vocabulary Practice</h2>
                        <div class="flex gap-2">
                            <div class="badge badge-accent" id="difficulty-badge">Beginner</div>
                            <div class="badge badge-outline" id="category-badge">General</div>
                        </div>
                    </div>
                    
                    <div id="practice-content">
                        <div class="text-center py-8">
                            <span class="loading loading-spinner loading-lg text-accent"></span>
                            <p class="mt-4">Loading vocabulary...</p>
                        </div>
                    </div>

                    <div class="card-actions justify-between mt-6" id="practice-actions" style="display: none;">
                        <div class="flex gap-2">
                            <button class="btn btn-outline btn-sm" onclick="playAudio()" id="audio-btn">
                                🔊 Audio
                            </button>
                            <button class="btn btn-outline btn-sm" onclick="showHint()" id="hint-btn">
                                💡 Hint
                            </button>
                        </div>
                        <button class="btn btn-accent" onclick="submitAnswer()" id="submit-btn">
                            Submit Answer
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Word Banks Mode -->
        <div id="wordbank-mode" style="display: none;">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="wordbank-grid">
                <!-- Word banks will be loaded here -->
            </div>
        </div>

        <!-- Results Modal -->
        <dialog id="result-modal" class="modal">
            <div class="modal-box">
                <h3 class="font-bold text-lg" id="result-title">Result</h3>
                <div class="py-4" id="result-content"></div>
                <div class="modal-action">
                    <button class="btn btn-accent" onclick="nextWord()">Next Word</button>
                </div>
            </div>
        </dialog>

        <!-- Word Details Modal -->
        <dialog id="word-modal" class="modal">
            <div class="modal-box">
                <h3 class="font-bold text-lg" id="word-title"></h3>
                <div class="py-4" id="word-details"></div>
                <div class="modal-action">
                    <form method="dialog">
                        <button class="btn">Close</button>
                    </form>
                </div>
            </div>
        </dialog>

        <!-- Settings Panel -->
        <div class="fixed bottom-4 right-4">
            <div class="dropdown dropdown-top dropdown-end">
                <div tabindex="0" role="button" class="btn btn-circle btn-accent">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                    </svg>
                </div>
                <div tabindex="0" class="dropdown-content z-[1] card card-compact w-64 p-2 shadow bg-base-100 text-base-content">
                    <div class="card-body">
                        <h3 class="card-title">Settings</h3>
                        <div class="form-control">
                            <label class="label">
                                <span class="label-text">From Language</span>
                            </label>
                            <select class="select select-bordered select-sm" id="language-select">
                                <option value="english">English</option>
                                <option value="spanish">Spanish</option>
                                <option value="french">French</option>
                            </select>
                        </div>
                        <div class="form-control">
                            <label class="label">
                                <span class="label-text">To Language</span>
                            </label>
                            <select class="select select-bordered select-sm" id="target-language-select">
                                <option value="spanish">Spanish</option>
                                <option value="english">English</option>
                                <option value="french">French</option>
                            </select>
                        </div>
                        <div class="form-control">
                            <label class="label">
                                <span class="label-text">Difficulty</span>
                            </label>
                            <select class="select select-bordered select-sm" id="difficulty-select">
                                <option value="">All Levels</option>
                                <option value="beginner">Beginner</option>
                                <option value="intermediate">Intermediate</option>
                                <option value="advanced">Advanced</option>
                            </select>
                        </div>
                        <div class="form-control">
                            <label class="label">
                                <span class="label-text">Category</span>
                            </label>
                            <select class="select select-bordered select-sm" id="category-select">
                                <option value="">All Categories</option>
                                <!-- Categories will be loaded dynamically -->
                            </select>
                        </div>
                        <div class="form-control">
                            <label class="label">
                                <span class="label-text">Words per session</span>
                            </label>
                            <select class="select select-bordered select-sm" id="count-select">
                                <option value="10">10 words</option>
                                <option value="20">20 words</option>
                                <option value="30">30 words</option>
                                <option value="50">50 words</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let currentMode = 'practice';
        let currentWord = null;
        let currentWordIndex = 0;
        let totalWords = 10;
        let words = [];
        let startTime = null;
        let score = 0;
        let streak = 0;
        let audioContext = null;

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            loadCategories();
            loadContent();
        });

        function switchMode(mode) {
            currentMode = mode;
            
            // Update tab appearance
            document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('tab-active'));
            document.getElementById(`${mode}-tab`).classList.add('tab-active');
            
            // Show/hide mode sections
            document.getElementById('practice-mode').style.display = 
                (mode === 'practice' || mode === 'quiz' || mode === 'review') ? 'block' : 'none';
            document.getElementById('wordbank-mode').style.display = 
                mode === 'wordbank' ? 'block' : 'none';
            document.getElementById('progress-section').style.display = 
                mode === 'wordbank' ? 'none' : 'block';
            
            loadContent();
        }

        async function loadCategories() {
            try {
                const language = document.getElementById('language-select').value;
                const targetLanguage = document.getElementById('target-language-select').value;
                
                const response = await fetch(`/api/vocabulary/categories?language=${language}&targetLanguage=${targetLanguage}`);
                
                if (response.ok) {
                    const categories = await response.json();
                    const categorySelect = document.getElementById('category-select');
                    
                    // Clear existing options except "All Categories"
                    categorySelect.innerHTML = '<option value="">All Categories</option>';
                    
                    categories.forEach(category => {
                        const option = document.createElement('option');
                        option.value = category;
                        option.textContent = category.charAt(0).toUpperCase() + category.slice(1);
                        categorySelect.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading categories:', error);
            }
        }

        async function loadContent() {
            if (currentMode === 'wordbank') {
                await loadWordBanks();
            } else {
                await loadWords();
            }
        }

        async function loadWords() {
            try {
                const language = document.getElementById('language-select').value;
                const targetLanguage = document.getElementById('target-language-select').value;
                const difficulty = document.getElementById('difficulty-select').value;
                const category = document.getElementById('category-select').value;
                const count = document.getElementById('count-select').value;
                
                const params = new URLSearchParams({
                    language,
                    targetLanguage,
                    count
                });
                
                if (difficulty) params.append('difficulty', difficulty);
                if (category) params.append('category', category);

                let endpoint = '/api/vocabulary/practice';
                if (currentMode === 'quiz') {
                    endpoint = '/api/vocabulary/quiz';
                } else if (currentMode === 'review') {
                    endpoint = '/api/vocabulary/review';
                }

                const response = await fetch(`${endpoint}?${params}`, {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    }
                });

                if (response.ok) {
                    const data = await response.json();
                    
                    if (currentMode === 'quiz') {
                        words = data.quiz.questions;
                        totalWords = words.length;
                    } else {
                        words = data;
                        totalWords = words.length;
                    }
                    
                    if (words.length === 0) {
                        document.getElementById('practice-content').innerHTML = `
                            <div class="alert alert-info">
                                <span>No words available for the selected criteria. Try adjusting your settings.</span>
                            </div>
                        `;
                        return;
                    }
                    
                    currentWordIndex = 0;
                    score = 0;
                    streak = 0;
                    updateStats();
                    showCurrentWord();
                } else {
                    throw new Error('Failed to load words');
                }
            } catch (error) {
                console.error('Error loading words:', error);
                document.getElementById('practice-content').innerHTML = `
                    <div class="alert alert-error">
                        <span>Failed to load vocabulary. Please try again.</span>
                    </div>
                `;
            }
        }

        function showCurrentWord() {
            if (currentWordIndex >= words.length) {
                showCompletionMessage();
                return;
            }

            currentWord = words[currentWordIndex];
            startTime = Date.now();
            
            updateProgress();
            displayWord();
            document.getElementById('practice-actions').style.display = 'flex';
        }

        function displayWord() {
            const content = document.getElementById('practice-content');
            const difficultyBadge = document.getElementById('difficulty-badge');
            const categoryBadge = document.getElementById('category-badge');
            
            difficultyBadge.textContent = currentWord.difficulty?.charAt(0).toUpperCase() + currentWord.difficulty?.slice(1) || 'Unknown';
            categoryBadge.textContent = currentWord.category?.charAt(0).toUpperCase() + currentWord.category?.slice(1) || 'General';

            let html = `<div class="mb-6">
                <div class="text-center mb-6">
                    <h3 class="text-3xl font-bold mb-2">${currentWord.word}</h3>
                    <div class="badge badge-outline">${currentWord.partOfSpeech || 'word'}</div>
                </div>
            `;

            if (currentMode === 'quiz' && currentWord.options) {
                html += `
                    <p class="text-lg mb-4 text-center">${currentWord.question}</p>
                    <div class="space-y-2">
                `;
                currentWord.options.forEach((option, index) => {
                    html += `
                        <label class="flex items-center space-x-2 cursor-pointer hover:bg-base-200 p-3 rounded">
                            <input type="radio" name="answer" value="${option.text}" class="radio radio-accent">
                            <span class="text-lg">${option.text}</span>
                        </label>
                    `;
                });
                html += '</div>';
            } else {
                html += `
                    <p class="text-lg mb-4 text-center">What does this word mean?</p>
                    <input type="text" class="input input-bordered w-full text-lg text-center" 
                           placeholder="Type the translation..." 
                           id="answer-input" 
                           autocomplete="off">
                `;
            }

            html += '</div>';
            content.innerHTML = html;

            // Focus on input if it exists
            const input = document.getElementById('answer-input');
            if (input) {
                input.focus();
                input.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        submitAnswer();
                    }
                });
            }
        }

        async function submitAnswer() {
            let answer = '';
            
            if (currentMode === 'quiz' && currentWord.options) {
                const selected = document.querySelector('input[name="answer"]:checked');
                if (!selected) {
                    alert('Please select an answer');
                    return;
                }
                answer = selected.value;
            } else {
                const input = document.getElementById('answer-input');
                answer = input.value.trim();
                if (!answer) {
                    alert('Please provide an answer');
                    return;
                }
            }

            const timeSpent = Math.floor((Date.now() - startTime) / 1000);

            try {
                const response = await fetch('/api/vocabulary/submit', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    },
                    body: JSON.stringify({
                        wordId: currentWord._id || currentWord.id,
                        answer,
                        timeSpent,
                        type: currentMode
                    })
                });

                const result = await response.json();
                
                if (result.correct) {
                    score += 10;
                    streak += 1;
                } else {
                    streak = 0;
                }
                
                updateStats();
                showResult(result);
            } catch (error) {
                console.error('Error submitting answer:', error);
                alert('Failed to submit answer. Please try again.');
            }
        }

        function showResult(result) {
            const modal = document.getElementById('result-modal');
            const title = document.getElementById('result-title');
            const content = document.getElementById('result-content');

            title.textContent = result.correct ? '✅ Correct!' : '❌ Incorrect';
            title.className = `font-bold text-lg ${result.correct ? 'text-success' : 'text-error'}`;

            let html = `
                <div class="space-y-4">
                    <div class="alert ${result.correct ? 'alert-success' : 'alert-error'}">
                        <span>${result.correct ? 'Well done!' : 'Keep practicing!'}</span>
                    </div>
                    
                    <div class="bg-base-200 p-4 rounded">
                        <div class="text-center">
                            <h4 class="font-bold text-lg">${currentWord.word}</h4>
                            <p class="text-lg">${result.correctAnswer}</p>
                        </div>
                    </div>
            `;

            if (result.explanation) {
                html += `
                    <div class="bg-base-200 p-4 rounded">
                        <strong>Example:</strong> ${result.explanation}
                    </div>
                `;
            }

            if (result.pronunciation && result.pronunciation.phonetic) {
                html += `
                    <div class="bg-base-200 p-4 rounded">
                        <strong>Pronunciation:</strong> ${result.pronunciation.phonetic}
                    </div>
                `;
            }

            html += `
                    <div class="stats shadow">
                        <div class="stat">
                            <div class="stat-title">Experience Gained</div>
                            <div class="stat-value text-accent">+${result.experienceGained}</div>
                        </div>
                    </div>
                </div>
            `;

            content.innerHTML = html;
            modal.showModal();
        }

        function nextWord() {
            document.getElementById('result-modal').close();
            currentWordIndex++;
            showCurrentWord();
        }

        function updateProgress() {
            const progress = ((currentWordIndex) / totalWords) * 100;
            document.getElementById('progress-bar').value = progress;
            document.getElementById('progress-text').textContent = `${currentWordIndex}/${totalWords}`;
        }

        function updateStats() {
            document.getElementById('score-text').textContent = score;
            document.getElementById('streak-text').textContent = streak;
        }

        function playAudio() {
            if (currentWord.pronunciation && currentWord.pronunciation.audioUrl) {
                const audio = new Audio(currentWord.pronunciation.audioUrl);
                audio.play().catch(e => console.log('Audio playback failed:', e));
            } else {
                // Use speech synthesis as fallback
                if ('speechSynthesis' in window) {
                    const utterance = new SpeechSynthesisUtterance(currentWord.word);
                    utterance.lang = getLanguageCode(document.getElementById('language-select').value);
                    speechSynthesis.speak(utterance);
                } else {
                    alert('Audio not available for this word');
                }
            }
        }

        function showHint() {
            if (currentWord.examples && currentWord.examples.length > 0) {
                alert(`💡 Hint: "${currentWord.examples[0].sentence}"`);
            } else {
                alert('💡 Hint: Think about the context and part of speech.');
            }
        }

        function getLanguageCode(language) {
            const codes = {
                'english': 'en-US',
                'spanish': 'es-ES',
                'french': 'fr-FR'
            };
            return codes[language] || 'en-US';
        }

        async function loadWordBanks() {
            try {
                const language = document.getElementById('language-select').value;
                const targetLanguage = document.getElementById('target-language-select').value;
                const difficulty = document.getElementById('difficulty-select').value;
                const category = document.getElementById('category-select').value;
                
                const params = new URLSearchParams({
                    language,
                    targetLanguage
                });
                
                if (difficulty) params.append('difficulty', difficulty);
                if (category) params.append('category', category);

                const response = await fetch(`/api/vocabulary/word-banks?${params}`);
                
                if (response.ok) {
                    const wordBanks = await response.json();
                    displayWordBanks(wordBanks);
                } else {
                    throw new Error('Failed to load word banks');
                }
            } catch (error) {
                console.error('Error loading word banks:', error);
                document.getElementById('wordbank-grid').innerHTML = `
                    <div class="col-span-full">
                        <div class="alert alert-error">
                            <span>Failed to load word banks. Please try again.</span>
                        </div>
                    </div>
                `;
            }
        }

        function displayWordBanks(wordBanks) {
            const grid = document.getElementById('wordbank-grid');
            
            if (wordBanks.length === 0) {
                grid.innerHTML = `
                    <div class="col-span-full">
                        <div class="alert alert-info">
                            <span>No word banks available for the selected criteria.</span>
                        </div>
                    </div>
                `;
                return;
            }

            let html = '';
            wordBanks.forEach(bank => {
                html += `
                    <div class="card bg-base-100 shadow-xl">
                        <div class="card-body">
                            <h2 class="card-title">${bank._id.charAt(0).toUpperCase() + bank._id.slice(1)}</h2>
                            <p>${bank.totalWords} words</p>
                            <div class="space-y-2">
                `;
                
                bank.difficulties.forEach(diff => {
                    const color = getDifficultyColor(diff.difficulty);
                    html += `
                        <div class="flex justify-between items-center">
                            <span class="badge ${color}">${diff.difficulty}</span>
                            <span>${diff.count} words</span>
                            <button class="btn btn-xs btn-outline" 
                                    onclick="showWordList('${bank._id}', '${diff.difficulty}')">
                                View
                            </button>
                        </div>
                    `;
                });
                
                html += `
                            </div>
                            <div class="card-actions justify-end">
                                <button class="btn btn-accent btn-sm" 
                                        onclick="practiceCategory('${bank._id}')">
                                    Practice
                                </button>
                            </div>
                        </div>
                    </div>
                `;
            });
            
            grid.innerHTML = html;
        }

        function getDifficultyColor(difficulty) {
            switch (difficulty) {
                case 'beginner': return 'badge-success';
                case 'intermediate': return 'badge-warning';
                case 'advanced': return 'badge-error';
                default: return 'badge-accent';
            }
        }

        function practiceCategory(category) {
            document.getElementById('category-select').value = category;
            switchMode('practice');
        }

        function showWordList(category, difficulty) {
            // This would show a detailed list of words in a modal
            alert(`Showing ${difficulty} words in ${category} category`);
        }

        function showCompletionMessage() {
            document.getElementById('practice-content').innerHTML = `
                <div class="text-center py-8">
                    <div class="text-6xl mb-4">🎉</div>
                    <h2 class="text-2xl font-bold mb-4">Excellent Work!</h2>
                    <p class="mb-2">You've completed this vocabulary session!</p>
                    <p class="mb-6">Final Score: <span class="text-accent font-bold">${score}</span> points</p>
                    <div class="space-x-4">
                        <button class="btn btn-accent" onclick="loadWords()">Practice Again</button>
                        <button class="btn btn-outline" onclick="switchMode('review')">Review Mode</button>
                    </div>
                </div>
            `;
            document.getElementById('practice-actions').style.display = 'none';
        }

        // Settings change handlers
        document.getElementById('language-select').addEventListener('change', () => {
            loadCategories();
            loadContent();
        });
        document.getElementById('target-language-select').addEventListener('change', () => {
            loadCategories();
            loadContent();
        });
        document.getElementById('difficulty-select').addEventListener('change', loadContent);
        document.getElementById('category-select').addEventListener('change', loadContent);
        document.getElementById('count-select').addEventListener('change', loadContent);

        function logout() {
            localStorage.removeItem('token');
            window.location.href = '/login';
        }
    </script>
</body>
</html>
