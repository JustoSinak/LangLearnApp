<!DOCTYPE html>
<html lang="en" data-theme="light">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flashcards - LinguaLearn</title>
    <link href="https://cdn.jsdelivr.net/npm/daisyui@4.12.23/dist/full.min.css" rel="stylesheet" type="text/css" />
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
    <style>
        .flashcard {
            perspective: 1000px;
            height: 300px;
        }
        .flashcard-inner {
            position: relative;
            width: 100%;
            height: 100%;
            text-align: center;
            transition: transform 0.6s;
            transform-style: preserve-3d;
        }
        .flashcard.flipped .flashcard-inner {
            transform: rotateY(180deg);
        }
        .flashcard-front, .flashcard-back {
            position: absolute;
            width: 100%;
            height: 100%;
            backface-visibility: hidden;
            border-radius: 1rem;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 2rem;
        }
        .flashcard-back {
            transform: rotateY(180deg);
        }
    </style>
</head>
<body class="bg-base-100">
    <!-- Navigation -->
    <div class="navbar bg-info text-info-content">
        <div class="navbar-start">
            <a href="/" class="btn btn-ghost text-xl">LinguaLearn</a>
        </div>
        <div class="navbar-center">
            <h1 class="text-lg font-semibold">Flashcards</h1>
        </div>
        <div class="navbar-end">
            <div class="dropdown dropdown-end">
                <div tabindex="0" role="button" class="btn btn-ghost btn-circle avatar">
                    <div class="w-10 rounded-full">
                        <img alt="User avatar" src="https://img.daisyui.com/images/stock/photo-1534528741775-53994a69daeb.webp" />
                    </div>
                </div>
                <ul tabindex="0" class="menu menu-sm dropdown-content bg-base-100 text-base-content rounded-box z-[1] mt-3 w-52 p-2 shadow">
                    <li><a href="/dashboard">Dashboard</a></li>
                    <li><a href="/profile">Profile</a></li>
                    <li><a onclick="logout()">Logout</a></li>
                </ul>
            </div>
        </div>
    </div>

    <div class="container mx-auto px-4 py-8">
        <!-- Mode Selection -->
        <div class="tabs tabs-boxed mb-8 justify-center">
            <a class="tab tab-active" onclick="switchMode('review')" id="review-tab">Review Cards</a>
            <a class="tab" onclick="switchMode('decks')" id="decks-tab">My Decks</a>
            <a class="tab" onclick="switchMode('create')" id="create-tab">Create Deck</a>
        </div>

        <!-- Review Mode -->
        <div id="review-mode">
            <!-- Progress Stats -->
            <div class="stats shadow w-full mb-8">
                <div class="stat">
                    <div class="stat-title">Cards Due</div>
                    <div class="stat-value text-info" id="due-count">0</div>
                    <div class="stat-desc">Ready for review</div>
                </div>
                <div class="stat">
                    <div class="stat-title">Session Progress</div>
                    <div class="stat-value text-sm" id="session-progress">0/0</div>
                    <div class="stat-desc">
                        <progress class="progress progress-info w-full" value="0" max="100" id="progress-bar"></progress>
                    </div>
                </div>
                <div class="stat">
                    <div class="stat-title">Accuracy</div>
                    <div class="stat-value text-success" id="accuracy">0%</div>
                    <div class="stat-desc">This session</div>
                </div>
            </div>

            <!-- Flashcard Display -->
            <div id="flashcard-container">
                <div class="text-center py-8">
                    <span class="loading loading-spinner loading-lg text-info"></span>
                    <p class="mt-4">Loading flashcards...</p>
                </div>
            </div>
        </div>

        <!-- Decks Mode -->
        <div id="decks-mode" style="display: none;">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-2xl font-bold">My Flashcard Decks</h2>
                <button class="btn btn-info" onclick="switchMode('create')">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                    </svg>
                    New Deck
                </button>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="decks-grid">
                <!-- Decks will be loaded here -->
            </div>
        </div>

        <!-- Create Deck Mode -->
        <div id="create-mode" style="display: none;">
            <div class="max-w-2xl mx-auto">
                <h2 class="text-2xl font-bold mb-6">Create New Deck</h2>
                
                <form id="create-deck-form" class="space-y-6">
                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Deck Name</span>
                        </label>
                        <input type="text" id="deck-name" placeholder="Enter deck name" 
                               class="input input-bordered" required>
                    </div>
                    
                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Description</span>
                        </label>
                        <textarea id="deck-description" placeholder="Describe your deck" 
                                  class="textarea textarea-bordered"></textarea>
                    </div>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div class="form-control">
                            <label class="label">
                                <span class="label-text">Language</span>
                            </label>
                            <select id="deck-language" class="select select-bordered" required>
                                <option value="">Select language</option>
                                <option value="english">English</option>
                                <option value="spanish">Spanish</option>
                                <option value="french">French</option>
                                <option value="german">German</option>
                            </select>
                        </div>
                        
                        <div class="form-control">
                            <label class="label">
                                <span class="label-text">Category</span>
                            </label>
                            <input type="text" id="deck-category" placeholder="e.g., Vocabulary, Grammar" 
                                   class="input input-bordered" required>
                        </div>
                    </div>
                    
                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Difficulty</span>
                        </label>
                        <select id="deck-difficulty" class="select select-bordered" required>
                            <option value="beginner">Beginner</option>
                            <option value="intermediate">Intermediate</option>
                            <option value="advanced">Advanced</option>
                        </select>
                    </div>
                    
                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Color Theme</span>
                        </label>
                        <div class="flex gap-2">
                            <input type="color" id="deck-color" value="#3B82F6" class="w-16 h-10 rounded border">
                            <input type="text" id="deck-color-text" value="#3B82F6" 
                                   class="input input-bordered flex-1" readonly>
                        </div>
                    </div>
                    
                    <div class="form-control">
                        <label class="cursor-pointer label">
                            <span class="label-text">Make deck public</span>
                            <input type="checkbox" id="deck-public" class="checkbox checkbox-info">
                        </label>
                    </div>
                    
                    <div class="flex gap-4">
                        <button type="submit" class="btn btn-info flex-1">Create Deck</button>
                        <button type="button" class="btn btn-outline" onclick="switchMode('decks')">Cancel</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Review Result Modal -->
    <dialog id="review-modal" class="modal">
        <div class="modal-box">
            <h3 class="font-bold text-lg mb-4">Review Complete!</h3>
            <div id="review-summary"></div>
            <div class="modal-action">
                <button class="btn btn-info" onclick="startNewSession()">Review More</button>
                <button class="btn btn-outline" onclick="closeReviewModal()">Done</button>
            </div>
        </div>
    </dialog>

    <script>
        let currentMode = 'review';
        let currentCard = null;
        let currentCardIndex = 0;
        let dueCards = [];
        let sessionStats = {
            total: 0,
            correct: 0,
            reviewed: 0
        };
        let startTime = null;

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            loadContent();
            
            // Color picker sync
            document.getElementById('deck-color').addEventListener('change', function() {
                document.getElementById('deck-color-text').value = this.value;
            });
        });

        function switchMode(mode) {
            currentMode = mode;
            
            // Update tab appearance
            document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('tab-active'));
            document.getElementById(`${mode}-tab`).classList.add('tab-active');
            
            // Show/hide mode sections
            document.getElementById('review-mode').style.display = mode === 'review' ? 'block' : 'none';
            document.getElementById('decks-mode').style.display = mode === 'decks' ? 'block' : 'none';
            document.getElementById('create-mode').style.display = mode === 'create' ? 'block' : 'none';
            
            loadContent();
        }

        async function loadContent() {
            if (currentMode === 'review') {
                await loadDueCards();
            } else if (currentMode === 'decks') {
                await loadDecks();
            }
        }

        async function loadDueCards() {
            try {
                const response = await fetch('/api/flashcard/cards/due?limit=20', {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    }
                });

                if (response.ok) {
                    dueCards = await response.json();
                    
                    document.getElementById('due-count').textContent = dueCards.length;
                    
                    if (dueCards.length === 0) {
                        document.getElementById('flashcard-container').innerHTML = `
                            <div class="text-center py-12">
                                <div class="text-6xl mb-4">🎉</div>
                                <h2 class="text-2xl font-bold mb-4">All caught up!</h2>
                                <p class="mb-6">No cards are due for review right now.</p>
                                <button class="btn btn-info" onclick="switchMode('decks')">
                                    Manage Decks
                                </button>
                            </div>
                        `;
                        return;
                    }
                    
                    sessionStats = {
                        total: dueCards.length,
                        correct: 0,
                        reviewed: 0
                    };
                    
                    currentCardIndex = 0;
                    showCurrentCard();
                } else {
                    throw new Error('Failed to load due cards');
                }
            } catch (error) {
                console.error('Error loading due cards:', error);
                document.getElementById('flashcard-container').innerHTML = `
                    <div class="alert alert-error">
                        <span>Failed to load flashcards. Please try again.</span>
                    </div>
                `;
            }
        }

        function showCurrentCard() {
            if (currentCardIndex >= dueCards.length) {
                showReviewComplete();
                return;
            }

            currentCard = dueCards[currentCardIndex];
            startTime = Date.now();
            
            updateProgress();
            displayCard();
        }

        function displayCard() {
            const container = document.getElementById('flashcard-container');
            
            const html = `
                <div class="max-w-2xl mx-auto">
                    <div class="flashcard" id="current-flashcard" onclick="flipCard()">
                        <div class="flashcard-inner">
                            <div class="flashcard-front bg-base-200 shadow-xl cursor-pointer">
                                <div class="text-center">
                                    <h3 class="text-3xl font-bold mb-4">${currentCard.front}</h3>
                                    <p class="text-sm opacity-70">Click to reveal answer</p>
                                </div>
                            </div>
                            <div class="flashcard-back bg-info text-info-content shadow-xl">
                                <div class="text-center">
                                    <h3 class="text-3xl font-bold mb-4">${currentCard.back}</h3>
                                    ${currentCard.notes ? `<p class="text-sm opacity-80">${currentCard.notes}</p>` : ''}
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="text-center mt-6">
                        <p class="mb-4">How well did you know this?</p>
                        <div class="flex justify-center gap-2 flex-wrap">
                            <button class="btn btn-error btn-sm" onclick="submitReview('again')">
                                Again
                            </button>
                            <button class="btn btn-warning btn-sm" onclick="submitReview('hard')">
                                Hard
                            </button>
                            <button class="btn btn-success btn-sm" onclick="submitReview('good')">
                                Good
                            </button>
                            <button class="btn btn-info btn-sm" onclick="submitReview('easy')">
                                Easy
                            </button>
                        </div>
                        <p class="text-xs mt-2 opacity-70">
                            Again: &lt;1min • Hard: &lt;6min • Good: &lt;10min • Easy: 4 days
                        </p>
                    </div>
                </div>
            `;
            
            container.innerHTML = html;
        }

        function flipCard() {
            document.getElementById('current-flashcard').classList.toggle('flipped');
        }

        async function submitReview(performance) {
            const timeSpent = Math.floor((Date.now() - startTime) / 1000);

            try {
                const response = await fetch('/api/flashcard/review', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    },
                    body: JSON.stringify({
                        cardId: currentCard._id,
                        performance,
                        timeSpent
                    })
                });

                if (response.ok) {
                    const result = await response.json();
                    
                    sessionStats.reviewed++;
                    if (performance !== 'again') {
                        sessionStats.correct++;
                    }
                    
                    updateStats();
                    
                    // Show brief feedback
                    showFeedback(performance, result.nextReviewIn);
                    
                    // Move to next card after delay
                    setTimeout(() => {
                        currentCardIndex++;
                        showCurrentCard();
                    }, 1500);
                } else {
                    throw new Error('Failed to submit review');
                }
            } catch (error) {
                console.error('Error submitting review:', error);
                alert('Failed to submit review. Please try again.');
            }
        }

        function showFeedback(performance, nextReviewIn) {
            const container = document.getElementById('flashcard-container');
            const feedbackMessages = {
                'again': { text: 'Keep practicing!', color: 'alert-error', icon: '🔄' },
                'hard': { text: 'Getting there!', color: 'alert-warning', icon: '💪' },
                'good': { text: 'Well done!', color: 'alert-success', icon: '👍' },
                'easy': { text: 'Excellent!', color: 'alert-info', icon: '🌟' }
            };
            
            const feedback = feedbackMessages[performance];
            
            container.innerHTML = `
                <div class="max-w-md mx-auto text-center">
                    <div class="alert ${feedback.color} mb-4">
                        <span>${feedback.icon} ${feedback.text}</span>
                    </div>
                    <p class="text-sm opacity-70">
                        Next review in ${nextReviewIn} day${nextReviewIn !== 1 ? 's' : ''}
                    </p>
                </div>
            `;
        }

        function updateProgress() {
            const progress = (sessionStats.reviewed / sessionStats.total) * 100;
            document.getElementById('progress-bar').value = progress;
            document.getElementById('session-progress').textContent = 
                `${sessionStats.reviewed}/${sessionStats.total}`;
        }

        function updateStats() {
            const accuracy = sessionStats.reviewed > 0 
                ? Math.round((sessionStats.correct / sessionStats.reviewed) * 100)
                : 0;
            document.getElementById('accuracy').textContent = `${accuracy}%`;
        }

        function showReviewComplete() {
            const accuracy = sessionStats.reviewed > 0 
                ? Math.round((sessionStats.correct / sessionStats.reviewed) * 100)
                : 0;
                
            document.getElementById('review-summary').innerHTML = `
                <div class="stats shadow w-full">
                    <div class="stat">
                        <div class="stat-title">Cards Reviewed</div>
                        <div class="stat-value">${sessionStats.reviewed}</div>
                    </div>
                    <div class="stat">
                        <div class="stat-title">Accuracy</div>
                        <div class="stat-value text-success">${accuracy}%</div>
                    </div>
                    <div class="stat">
                        <div class="stat-title">Correct</div>
                        <div class="stat-value text-info">${sessionStats.correct}</div>
                    </div>
                </div>
            `;
            
            document.getElementById('review-modal').showModal();
        }

        async function loadDecks() {
            try {
                const response = await fetch('/api/flashcard/decks', {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    }
                });

                if (response.ok) {
                    const data = await response.json();
                    displayDecks(data.decks);
                } else {
                    throw new Error('Failed to load decks');
                }
            } catch (error) {
                console.error('Error loading decks:', error);
                document.getElementById('decks-grid').innerHTML = `
                    <div class="col-span-full">
                        <div class="alert alert-error">
                            <span>Failed to load decks. Please try again.</span>
                        </div>
                    </div>
                `;
            }
        }

        function displayDecks(decks) {
            const grid = document.getElementById('decks-grid');
            
            if (decks.length === 0) {
                grid.innerHTML = `
                    <div class="col-span-full text-center py-12">
                        <div class="text-6xl mb-4">📚</div>
                        <h3 class="text-xl font-bold mb-4">No decks yet</h3>
                        <p class="mb-6">Create your first flashcard deck to get started!</p>
                        <button class="btn btn-info" onclick="switchMode('create')">
                            Create Deck
                        </button>
                    </div>
                `;
                return;
            }

            let html = '';
            decks.forEach(deck => {
                const { cardCounts } = deck;
                html += `
                    <div class="card bg-base-100 shadow-xl">
                        <div class="card-body">
                            <div class="flex items-start justify-between">
                                <h2 class="card-title">${deck.name}</h2>
                                <div class="w-4 h-4 rounded-full" style="background-color: ${deck.color}"></div>
                            </div>
                            
                            ${deck.description ? `<p class="text-sm opacity-70">${deck.description}</p>` : ''}
                            
                            <div class="stats stats-vertical shadow mt-4">
                                <div class="stat py-2">
                                    <div class="stat-title text-xs">Total Cards</div>
                                    <div class="stat-value text-lg">${cardCounts.total}</div>
                                </div>
                                <div class="stat py-2">
                                    <div class="stat-title text-xs">Due for Review</div>
                                    <div class="stat-value text-lg text-info">${cardCounts.review + cardCounts.learning}</div>
                                </div>
                            </div>
                            
                            <div class="card-actions justify-end mt-4">
                                <button class="btn btn-outline btn-sm" onclick="manageDeck('${deck._id}')">
                                    Manage
                                </button>
                                <button class="btn btn-info btn-sm" onclick="reviewDeck('${deck._id}')">
                                    Review
                                </button>
                            </div>
                        </div>
                    </div>
                `;
            });
            
            grid.innerHTML = html;
        }

        // Create deck form handler
        document.getElementById('create-deck-form').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const deckData = {
                name: document.getElementById('deck-name').value,
                description: document.getElementById('deck-description').value,
                language: document.getElementById('deck-language').value,
                category: document.getElementById('deck-category').value,
                difficulty: document.getElementById('deck-difficulty').value,
                color: document.getElementById('deck-color').value,
                isPublic: document.getElementById('deck-public').checked
            };

            try {
                const response = await fetch('/api/flashcard/decks', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    },
                    body: JSON.stringify(deckData)
                });

                if (response.ok) {
                    const result = await response.json();
                    alert('Deck created successfully!');
                    
                    // Reset form
                    document.getElementById('create-deck-form').reset();
                    document.getElementById('deck-color').value = '#3B82F6';
                    document.getElementById('deck-color-text').value = '#3B82F6';
                    
                    // Switch to decks view
                    switchMode('decks');
                } else {
                    const error = await response.json();
                    alert(error.message || 'Failed to create deck');
                }
            } catch (error) {
                console.error('Error creating deck:', error);
                alert('Failed to create deck. Please try again.');
            }
        });

        function reviewDeck(deckId) {
            // Load cards from specific deck for review
            switchMode('review');
            // You could modify loadDueCards to filter by deck
        }

        function manageDeck(deckId) {
            // Navigate to deck management page
            alert('Deck management feature coming soon!');
        }

        function startNewSession() {
            document.getElementById('review-modal').close();
            loadDueCards();
        }

        function closeReviewModal() {
            document.getElementById('review-modal').close();
            switchMode('decks');
        }

        function logout() {
            localStorage.removeItem('token');
            window.location.href = '/login';
        }
    </script>
</body>
</html>
